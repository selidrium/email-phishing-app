services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    env_file:
      - .env
    volumes:
      - ./backend:/app/backend
      - ./database:/app/database
    ports:
      - "8000:8000"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    volumes:
      # Mount source code for hot reloading (not read-only to allow npm operations)
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/package.json:/app/package.json
      # Preserve node_modules in container
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    environment:
      # React development optimizations
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - FAST_REFRESH=true
      - GENERATE_SOURCEMAP=false
      # Node.js optimizations
      - NODE_ENV=development
      - NPM_CONFIG_CACHE=/tmp/.npm
      # WebSocket configuration for hot reloading
      - WDS_SOCKET_HOST=0.0.0.0
      - WDS_SOCKET_PORT=3000
      - HOST=0.0.0.0
      - PORT=3000
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    # Temporarily disable healthcheck to test if it's causing SIGTERM
    # healthcheck:
    #   test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://0.0.0.0:3000/"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 60s

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
